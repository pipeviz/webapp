{
  "version": 3,
  "sources": [
    "node_modules/factor-bundle/node_modules/browser-pack/_prelude.js",
    "src/page/data.js",
    "src/viz/data.js",
    "src/utils/dataviewer/lens.js",
    "src/utils/dataviewer/leaf.js",
    "src/utils/dataviewer/uid.js",
    "src/utils/dataviewer/type.js",
    "src/utils/dataviewer/highlighter.js",
    "src/utils/dataviewer/is-empty.js",
    "src/utils/dataviewer/filter-bar.js",
    "src/utils/dataviewer/noop.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzVA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var index = require('../index');\nvar data = require('../viz/data');\n\nindex.openSocket();\nindex.display(data.App, document.querySelector('#main'));\n",
    "var React = require('react');\nvar D = React.DOM;\n\nvar Leaf = require('../utils/dataviewer/leaf');\nvar leaf = React.createFactory(Leaf);\nvar FilterBar = require('../utils/dataviewer/filter-bar');\nvar filterBar = React.createFactory(FilterBar);\n\nvar isEmpty = require('../utils/dataviewer/is-empty');\nvar lens = require('../utils/dataviewer/lens');\nvar noop = require('../utils/dataviewer/noop');\n\nvar pvd = require('../utils/pvd');\n\nvar Data = React.createClass({\n  propTypes: {\n    graph: React.PropTypes.object.isRequired,\n    // For now it expects a factory function, not element.\n    search: React.PropTypes.oneOfType([\n      React.PropTypes.func,\n      React.PropTypes.bool\n    ]),\n    onClick: React.PropTypes.func,\n    validateQuery: React.PropTypes.func,\n    isExpanded: React.PropTypes.func,\n  },\n\n  getDefaultProps: function() {\n    return {\n      className: '',\n      id: 'pv-dataviewer',\n      onClick: noop,\n      validateQuery: function(query) {\n        return query.length >= 2;\n      },\n      /**\n       * Decide whether the leaf node at given `keypath` should be\n       * expanded initially.\n       * @param  {String} keypath\n       * @param  {Any} value\n       * @return {Boolean}\n       */\n      isExpanded: function(keypath, value) {\n        return typeof value.initialExpand === 'function' ? value.initialExpand() : false;\n      }\n    };\n  },\n  getInitialState: function() {\n    return {\n      query: '',\n      filter: ''\n    };\n  },\n  render: function() {\n    var p = this.props;\n    var s = this.state;\n\n    var data = s.filter ? p.graph.verticesWithType(s.filter) : p.graph.vertices();\n\n    var rootNode = leaf({\n      data: data,\n      onClick: p.onClick,\n      id: p.id,\n      getOriginal: this.getOriginal,\n      query: s.query,\n      label: 'pv data',\n      root: true,\n      isExpanded: p.isExpanded,\n      interactiveLabel: p.interactiveLabel,\n      graph: p.graph,\n      filter: s.filter\n    });\n\n    var notFound = D.div({ className: 'pv-dataviewer__not-found' }, 'Nothing found');\n\n    return D.div({ className: 'pv-dataviewer ' + p.className },\n                 this.renderToolbar(),\n                 isEmpty(data) ? notFound : rootNode);\n  },\n  renderToolbar: function() {\n    return D.div({ className: 'pv-dataviewer__toolbar' },\n                 filterBar({\n                   onChange: this.setFilter,\n                   selected: this.state.filter,\n                   options: this.props.graph.types(),\n                 }));\n  },\n  search: function(query) {\n    if (query === '' || this.props.validateQuery(query)) {\n      this.setState({\n        query: query\n      });\n    }\n  },\n  setFilter: function(type) {\n    this.setState({\n      filter: type,\n    });\n  },\n  shouldComponentUpdate: function (p, s) {\n    return s.query !== this.state.query ||\n      s.filter !== this.state.filter ||\n      p.graph.mid !== this.props.graph.mid ||\n      p.onClick !== this.props.onClick;\n  },\n  getOriginal: function(path) {\n    return lens(this.props.data, path);\n  }\n});\n\nmodule.exports.App = React.createClass({\n  displayName: \"pipeviz\",\n  getDefaultProps: function () {\n    return {\n      graph: pvd.pvGraph({id: 0, vertices: []})\n    };\n  },\n  render: function () {\n    return React.createElement('section', {id: 'pipeviz'}, React.createElement(Data, {graph: this.props.graph}));\n  }\n});\n",
    "var type = require('./type');\n\nvar PATH_DELIMITER = '.';\n\nfunction lens(data, path) {\n    var p = path.split(PATH_DELIMITER);\n    var segment = p.shift();\n\n    if (!segment) {\n        return data;\n    }\n\n    var t = type(data);\n\n    if (t === 'Array' && data[integer(segment)]) {\n        return lens(data[integer(segment)], p.join(PATH_DELIMITER));\n    } else if (t === 'Object' && data[segment]) {\n        return lens(data[segment], p.join(PATH_DELIMITER));\n    }\n}\n\nfunction integer(string) {\n    return parseInt(string, 10);\n}\n\nmodule.exports = lens;\n",
    "var React = require('react');\nvar D = React.DOM;\n\nvar uid = require('./uid');\nvar type = require('./type');\n\nvar Highlighter = require('./highlighter');\nvar highlighter = React.createFactory(Highlighter);\n\nvar pvd = require('../pvd.js');\nvar query = require('../query.js');\nvar _ = require('lodash');\n\nvar PATH_PREFIX = '.root.';\n\nvar Leaf = React.createClass({\n  getInitialState: function() {\n    return {\n      expanded: this._isInitiallyExpanded(this.props)\n    };\n  },\n  getDefaultProps: function() {\n    return {\n      root: false,\n      filter: '',\n      prefix: ''\n    };\n  },\n  render: function() {\n      var id = 'id_' + uid();\n      var p = this.props;\n\n      var d = {\n        path: this.keypath(),\n        key: p.label.toString(),\n        value: p.data\n      };\n\n      var onLabelClick = this._onClick.bind(this, d);\n\n      return D.div({ className: this.getClassName(), id: 'leaf-' + this._rootPath() },\n        D.input({ className: 'pv-dataviewer__radio', type: 'radio', name: p.id, id: id, tabIndex: -1 }),\n        D.label({ className: 'pv-dataviewer__line', htmlFor: id, onClick: onLabelClick },\n          D.div({ className: 'pv-dataviewer__flatpath' }, d.path),\n          D.span({ className: 'pv-dataviewer__key' },\n            this.format(d.key),\n            ':',\n            this.renderInteractiveLabel(d.key, true)),\n          this.renderTitle(),\n          this.renderShowOriginalButton()),\n        this.renderChildren());\n  },\n  renderTitle: function() {\n    var data = this.data();\n    var t = type(data);\n\n    // special case for root\n    if (this.props.root) {\n      return D.span({ className: 'pv-dataviewer__value pv-dataviewer__value_helper' },\n                    _.filter([data.length, this.props.filter, \"vertices\", '(at message ' + this.props.graph.mid + ')']).join(' ')\n                   );\n    }\n\n    switch (t) {\n      case 'Array':\n        return D.span({ className: 'pv-dataviewer__value pv-dataviewer__value_helper' },\n                      '[] ' + items(data.length));\n        case 'Object':\n          if (pvd.isVertex(data) || pvd.isEdge(data)) {\n            return D.span({ className: 'pv-dataviewer__value pv-dataviewer__value_helper' },\n                          data.Typ() + (query.objectLabel(data) ? ' ' + query.objectLabel(data) : ''));\n          } else if (_.has(data, 'isPropObj')) {\n            // Condense property objects into a single \"value\"\n            return D.span({ className: 'pv-dataviewer__value pv-dataviewer__propvalue pv-dataviewer__value_' + type(data.value).toLowerCase() },\n                          data.value, D.span({ className: 'pv-dataviewer__msgsrc' }, \"  (from msg: \" + data.msgsrc + \")\"),\n                          this.renderInteractiveLabel(data.value, false));\n          }\n\n          return D.span({ className: 'pv-dataviewer__value pv-dataviewer__value_helper' },\n                        '{} ' + items(Object.keys(data).length));\n        default:\n          return D.span({ className: 'pv-dataviewer__value pv-dataviewer__value_' + t.toLowerCase() },\n                        this.format(String(data)),\n                        this.renderInteractiveLabel(data, false));\n    }\n  },\n  renderChildren: function() {\n    var p = this.props;\n    var childPrefix = this._rootPath();\n    var data = this.data();\n    var shared = {\n      prefix: childPrefix,\n      onClick: p.onClick,\n      id: p.id,\n      query: p.query,\n      getOriginal: this.state.original ? null : p.getOriginal,\n      isExpanded: p.isExpanded,\n      interactiveLabel: p.interactiveLabel,\n      graph: p.graph\n    };\n\n    if (this.state.expanded && !isPrimitive(data) && !_.has(data, 'isPropObj')) {\n      if (pvd.isVertex(data) || pvd.isEdge(data)) {\n        var isv = pvd.isVertex(data);\n        // id up front\n        var children = [leaf(_.assign({\n          data: data.id,\n          label: \"id\",\n          key: getLeafKey(\"id\", data.id)\n        }, shared))];\n\n        // etype/vtype next\n        children.push(leaf(_.assign({\n          data: data.Typ(),\n          label: isv ? \"vtype\" : \"etype\",\n          key: getLeafKey(isv ? \"vtype\" : \"etype\", data.Typ())\n        }, shared)));\n\n        if (!isv) {\n          // stick the source and target in now for edges\n          children.push(leaf(_.assign({\n            data: p.graph.get(data.source),\n            label: \"source\",\n            key: getLeafKey(\"source\", {})\n          }, shared)));\n\n          children.push(leaf(_.assign({\n            data: p.graph.get(data.target),\n            label: \"target\",\n            key: getLeafKey(\"target\", {})\n          }, shared)));\n        }\n\n        // now, props\n        children.push(leaf(_.assign({\n          data: _.mapValues(pvd.isVertex(data) ? data.vertex.properties : data.properties, function(v) {\n            return _.assign({isPropObj: true}, v);\n          }),\n          label: \"properties\",\n          key: getLeafKey(\"properties\", {}) // just cheat\n        }, shared, { isExpanded: function() { return true; }}))); // always expand from prop level downwards\n\n        // finally, if it's a vertex, add the edges\n        if (isv) {\n          children.push(leaf(_.assign({\n            data: _.assign(Object.create(expander),\n                           _.zipObject(_.map(data.outEdges, function(eid) {\n                             return [eid, p.graph.get(eid)];\n                           }))),\n            label: \"outEdges\",\n            key: getLeafKey(\"outEdges\", {}) // just cheat\n          }, shared)));\n\n          children.push(leaf(_.assign({\n            data: _.assign(Object.create(expander),\n                           _.zipObject(_.map(data.inEdges, function(eid) {\n                             return [eid, p.graph.get(eid)];\n                           }))),\n            label: \"inEdges\",\n            key: getLeafKey(\"inEdges\", {}) // just cheat\n          }, shared)));\n        }\n\n        return children;\n      } else {\n        return Object.keys(data).map(function(key) {\n          var value = data[key];\n\n          // hardcode: use the vertex id instead of array position\n          if (p.root) {\n            key = data[key].id;\n          }\n\n          return leaf({\n            data: value,\n            label: key,\n            prefix: childPrefix,\n            onClick: p.onClick,\n            id: p.id,\n            query: p.query,\n            getOriginal: this.state.original ? null : p.getOriginal,\n            key: getLeafKey(key, value),\n            isExpanded: p.isExpanded,\n            interactiveLabel: p.interactiveLabel,\n            graph: p.graph\n          });\n        }, this);\n      }\n    }\n\n    return null;\n  },\n  renderShowOriginalButton: function() {\n    var p = this.props;\n\n    if (isPrimitive(p.data) || _.has(p.data, 'isPropObj') || this.state.original || !p.getOriginal || !p.query || contains(this.keypath(), p.query)) {\n      return null;\n    }\n\n    return D.span({\n      className: 'pv-dataviewer__show-original',\n      onClick: this._onShowOriginalClick\n    });\n  },\n  renderInteractiveLabel: function(originalValue, isKey) {\n    if (typeof this.props.interactiveLabel === 'function') {\n      return this.props.interactiveLabel({\n        // The distinction between `value` and `originalValue` is\n        // provided to have backwards compatibility.\n        value: String(originalValue),\n        originalValue: originalValue,\n        isKey: isKey,\n        keypath: this.keypath()\n      });\n    }\n\n    return null;\n  },\n  componentWillReceiveProps: function(p) {\n    if (p.query) {\n      this.setState({\n        expanded: !contains(p.label, p.query)\n      });\n    }\n\n    // Restore original expansion state when switching from search mode\n    // to full browse mode.\n    if (this.props.query && !p.query) {\n      this.setState({\n        expanded: this._isInitiallyExpanded(p)\n      });\n    }\n  },\n  _rootPath: function() {\n    return this.props.prefix + '.' + this.props.label;\n  },\n  keypath: function() {\n    return this._rootPath().substr(PATH_PREFIX.length);\n  },\n  data: function() {\n    return this.state.original || this.props.data;\n    //return this.state.original || (_.has(this.props.data, 'isPropObj') ? this.props.data.value : this.props.data);\n  },\n  format: function(string) {\n    return highlighter({\n      string: string,\n      highlight: this.props.query\n    });\n  },\n  getClassName: function() {\n    var cn = 'pv-dataviewer__leaf';\n\n    if (this.props.root) {\n      cn += ' pv-dataviewer__leaf_root';\n    }\n\n    if (this.state.expanded) {\n      cn += ' pv-dataviewer__leaf_expanded';\n    }\n\n    if (!isPrimitive(this.props.data)) {\n      cn += ' pv-dataviewer__leaf_composite';\n    }\n\n    if (pvd.isVertex(this.props.data)) {\n      cn += ' pv-dataviewer__vertex_leaf';\n    }\n\n    if (pvd.isEdge(this.props.data)) {\n      cn += ' pv-dataviewer__edge_leaf';\n    }\n\n    return cn;\n  },\n  toggle: function() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  },\n  _onClick: function(data, e) {\n    this.toggle();\n    this.props.onClick(data);\n\n    e.stopPropagation();\n  },\n  _onShowOriginalClick: function(e) {\n    this.setState({\n      original: this.props.getOriginal(this.keypath())\n    });\n\n    e.stopPropagation();\n  },\n  _isInitiallyExpanded: function(p) {\n    var keypath = this.keypath();\n\n    if (p.root) {\n      return true;\n    }\n\n    if (p.query === '') {\n      return p.isExpanded(keypath, p.data);\n    } else {\n      // When a search query is specified, first check if the keypath\n      // contains the search query: if it does, then the current leaf\n      // is itself a search result and there is no need to expand further.\n      //\n      // Having a `getOriginal` function passed signalizes that current\n      // leaf only displays a subset of data, thus should be rendered\n      // expanded to reveal the children that is being searched for.\n      return !contains(keypath, p.query) && (typeof p.getOriginal === 'function');\n    }\n  }\n});\n\nvar expander = {\n  initialExpand: function() { return true; }\n};\n\n// FIXME: There should be a better way to call a component factory from inside\n// component definition.\nvar leaf = React.createFactory(Leaf);\n\nfunction items(count) {\n    return count + (count === 1 ? ' item' : ' items');\n}\n\nfunction getLeafKey(key, value) {\n    if (isPrimitive(value)) {\n        return key + ':' + value;\n    } else {\n        return key + '[' + type(value) + ']';\n    }\n}\n\nfunction contains(string, substring) {\n    return string.indexOf(substring) !== -1;\n}\n\nfunction isPrimitive(value) {\n    var t = type(value);\n    //return (t !== 'Object' || _.has(value, 'isPropObj')) && t !== 'Array';\n    return t !== 'Object' && t !== 'Array';\n}\n\nmodule.exports = Leaf;\n",
    "var id = Math.ceil(Math.random() * 10);\n\nmodule.exports = function() {\n    return ++id;\n};\n",
    "module.exports = function(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n};\n",
    "var React = require('react');\nvar span = React.DOM.span;\n\nmodule.exports = React.createClass({\n    getDefaultProps: function() {\n        return {\n            string: '',\n            highlight: ''\n        };\n    },\n    shouldComponentUpdate: function(p) {\n        return p.highlight !== this.props.highlight;\n    },\n    render: function() {\n        var p = this.props;\n\n        if (!p.highlight || p.string.indexOf(p.highlight) === -1) {\n            return span(null, p.string);\n        }\n\n        return span(null,\n            p.string.split(p.highlight).map(function(part, index) {\n                return span({ key: index },\n                    index > 0 ?\n                        span({ className: 'pv-dataviewer__hl' }, p.highlight) :\n                        null,\n                    part);\n            }));\n    }\n});\n",
    "module.exports = function(object) {\n    return Object.keys(object).length === 0;\n};\n",
    "var _ = require('lodash');\nvar React = require('react');\n\nvar noop = require('./noop');\n\nmodule.exports = React.createClass({\n  getDefaultProps: function() {\n    return {\n      selected: '',\n      options: [],\n      onChange: noop\n    };\n  },\n  render: function() {\n    var p = this.props;\n\n    return React.DOM.span({className: 'pv-dataviewer__filter'}, p.options.concat(['']).map(function(opt) {\n      return React.DOM.label({}, React.DOM.input({\n        key: opt,\n        type: 'radio',\n        checked: p.selected === opt,\n        onChange: p.onChange.bind(this, opt),\n      }), opt === '' ? '(All)' : opt);\n    }));\n  },\n});\n",
    "module.exports = function() {};\n"
  ]
}